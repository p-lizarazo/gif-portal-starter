{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","sendGif","length","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","gif","src","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAAe,MAA0B,yC,eCKnCA,EAAiB,cACjBC,EAAY,8BAA0BD,GAEtCE,EAAY,CACjB,0DACA,sIACA,sIACA,2DA+IcC,EA5IH,WACV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAwB,uCAAG,gCAAAC,EAAA,oEAEVC,SAAXC,EAFqB,EAErBA,QAFqB,qBAKvBA,EAAOC,UALgB,wBAMzBC,QAAQC,IAAI,yBANa,SAQFH,EAAOI,QAAQ,CAAEC,eAAe,IAR9B,OAQnBC,EARmB,OASzBJ,QAAQC,IACN,6BACAG,EAASC,UAAUC,YAGrBhB,EAAiBc,EAASC,UAAUC,YAdX,gCAiB3BC,MAAM,8DAjBqB,0DAoB7BP,QAAQQ,MAAR,MApB6B,0DAAH,qDAwBxBC,EAAa,uCAAG,gCAAAb,EAAA,2DACDC,SAAXC,EADY,EACZA,QADY,gCAIKA,EAAOI,UAJZ,OAIZE,EAJY,OAKlBJ,QAAQC,IAAI,6BAA8BG,EAASC,UAAUC,YAC7DhB,EAAiBc,EAASC,UAAUC,YANlB,2CAAH,qDAUbI,EAAgB,SAACC,GACrB,IAAQC,EAAUD,EAAME,OAAhBD,MACRpB,EAAcoB,IAGVE,EAAO,uCAAG,sBAAAlB,EAAA,sDACVL,EAAWwB,OAAS,GACtBf,QAAQC,IAAI,YAAaV,GACzBG,EAAW,GAAD,mBAAKD,GAAL,CAAcF,KACxBC,EAAc,KAEdQ,QAAQC,IAAI,2BANA,2CAAH,qDAqEb,OAvBAe,qBAAU,WACJ3B,IACFW,QAAQC,IAAI,wBAKZP,EAAWR,MAEZ,CAACG,IAMJ2B,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAArB,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOqB,iBAAiB,OAAQD,GACzB,kBAAMpB,OAAOsB,oBAAoB,OAAQF,MAC/C,IAGD,qBAAKG,UAAU,MAAf,SAEE,sBAAKA,UAAW/B,EAAgB,mBAAqB,YAArD,UACE,sBAAK+B,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,6CACA,mBAAGA,UAAU,WAAb,kEAIE/B,GApER,wBACE+B,UAAU,mCACVC,QAASZ,EAFX,+BAqEOpB,GA5DP,sBAAK+B,UAAU,sBAAf,UACI,uBACAE,SAAU,SAACX,GACTA,EAAMY,iBACNT,KAHF,UAMA,uBACEU,KAAK,OACLC,YAAY,kBACZb,MAAOrB,EACPmC,SAAUhB,IAEZ,wBAAQc,KAAK,SAASJ,UAAU,+BAAhC,uBAGF,qBAAKA,UAAU,WAAf,SACG3B,EAAQkC,KAAI,SAAAC,GAAG,OACd,qBAAKR,UAAU,WAAf,SACE,qBAAKS,IAAKD,EAAKE,IAAKF,KADSA,cA4CjC,sBAAKR,UAAU,mBAAf,UACE,qBAAKU,IAAI,eAAeV,UAAU,eAAeS,IAAKE,IACtD,mBACEX,UAAU,cACVY,KAAM/C,EACN4B,OAAO,SACPoB,IAAI,aAJN,6BAKejD,cC/IzBkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f24935ce.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import {  useEffect, useState } from 'react'; \nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n        <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          sendGif();\n        }}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Enter gif link!\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\" className=\"cta-button submit-gif-button\">Submit</button>\n      </form>\n\n      <div className=\"gif-grid\">\n        {gifList.map(gif => (\n          <div className=\"gif-item\" key={gif}>\n            <img src={gif} alt={gif} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      \n      // Call Solana program here.\n  \n      // Set state\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  /*\n  * When our component first mounts, let's check to see if we have a connected\n  * Phantom Wallet\n  */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Random GIF Portal!!ðŸ–¼</p>\n          <p className=\"sub-text\">\n            Explore all your randomness in the metaverse âœ¨\n          </p>\n          {/* Render your connect to wallet button right here */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}